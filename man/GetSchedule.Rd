% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/firstapiR_http.R
\name{GetSchedule}
\alias{GetSchedule}
\title{Get the match schedule for a specific event}
\usage{
GetSchedule(session, event, level = "qual", team = NULL, start = NULL,
  end = NULL, expand_cols = FALSE, mod_since = NULL,
  only_mod_since = NULL)
}
\arguments{
\item{session}{A Session object created with \code{GetSession()}.}

\item{event}{A character vector containing a FIRST API event code
(see \code{GetEvents}).}

\item{level}{A character vector containing either \emph{"qual"} or
\emph{"playoff"}. Defaults to \emph{"qual"}. Optional.}

\item{team}{An integer vector containing a team number. Optional.}

\item{start}{An integer vector containing the earliest match to return.
Optional.}

\item{end}{An integer vector containing the latest match to return. Optional.}

\item{expand_cols}{A logical value that defaults to \code{FALSE}. If
\code{TRUE}, the dataframe will include one row for each scheduled match,
with a different column for each team. If \code{FALSE}, there will be six
rows for each match, with each row listing one assigned team and their
station. Optional.}

\item{mod_since}{A character vector containing an HTTP formatted date and
time. Returns \code{NA} if no changes have been made to the requested data
since the date and time provided. Optional.}

\item{only_mod_since}{A character vector containing an HTTP formatted date
and time. This function only returns data that has changed since the date
and time provided. Optional.}
}
\value{
Depending on the \code{session$format} value, returns JSON text, an
  XML::XMLDocument object, or a data.frame with class set to c("data.frame,
  "Schedule"). Returns a logical vector of length one with value \code{NA} if
  data is unchanged since date and time passed in arguments \code{mod_since}
  or \code{only_mod_since}.
}
\description{
Returns either the qualification schedule or the playoff schedule, based on
the value of the \code{level} argument. The \code{start} and \code{end}
arguments allow filtering of results to specific matches.
}
\details{
Depending on the \code{expand_cols} argument, \code{GetSchedule} can
structure the resulting data frame two diferent ways. When \code{expand_cols}
is set to \emph{FALSE} the data frame will contain six rows for every match
returned. Each row will include data on one team that participates in the
match. This narrow (i.e., fewer columns) structure is useful when filtering
results to specific teams, because only one column, \emph{teamNumber}, must
be filtered. When \code{expand_cols} is set to \emph{TRUE} the data frame
will have one row per match, with all six participating teams listed in one
row. This wide format is useful for displaying the schedule in a table.

See the \emph{Event Schedule} section of the FIRST API documentation at
\url{http://docs.frcevents2.apiary.io/#} for more details.

The FIRST API URL format is:

\code{https://frc-api.firstinspires.org/v2.0/season/schedule/event?
tournamentLevel=level&teamNumber=team&start=start&end=end}
}
\section{Columns}{

  \enumerate{
    \item \emph{description}: character
    \item \emph{field}: character
    \item \emph{tournamentLevel}: factor
    \item \emph{matchNumber}: integer
    \item \emph{startTime}: character}

     If expand_cols == \emph{FALSE}
       \enumerate{
         \item \emph{teamNumber}: factor
         \item \emph{alliance}: factor (Red, Blue)
         \item \emph{station}: factor (Red1, Red2, Red3, Blue1, Blue2, Blue3)
         \item \emph{surrogate}: logical}

    If expand_cols == \emph{TRUE}
      \enumerate{
        \item \emph{Red1.team, Red2.team, Red3.team}: factor
        \item \emph{Blue1.team, Blue2.team, Blue3.team}: factor
        \item \emph{Red1.surrogate, Red2.surrogate, Red3.surrogate}: logical
        \item \emph{Blue1.surrogate, Blue2.surrogate, Blue3.surrogate}:
          logical}
}

\section{Attributes}{

 \enumerate{
    \item \emph{url}: Character vector containing URL submitted to FIRST API
      server.
    \item \emph{local_test_data}: \code{TRUE} if data was extracted from
      R/sysdata.rda file.
    \item \emph{local_url}: Character vector containing URL used to download
      local data.
    \item \emph{time_downloaded}: Character vector containing the local
      system time that the object was downladed from the FIRST API server.
      Formatted an an http date and time string.
    \item \emph{last_modified}: Character vector containing the date and time
      that the data was last modified by the FIRST API server.
    \item \emph{mod_since}: Character vector containing the value passed to
      the \code{mod_since argument}, or NULL if no argument was passed.
      Formatted as an http date and time string.
    \item \emph{only_mod_since}: Character vector containing the value passed
      to the \code{only_mod_since} argument, or NULL if no argument was
      passed. Formatted as an http date and time string.}
}
\examples{
sn <- GetSession("username", "key")
GetSchedule(sn, "PNCMP")
GetSchedule(sn, "PNCMP", start=5, end=10)
GetSchedule(sn, "WAAMV", level='playoff')
GetSchedule(sn, "PNCMP", team=4911, end=25)
}

